# -*- coding: utf-8 -*-
"""Twitter Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Hv-zoF1pqcn01YPIGE4YRQp2WphqHJ9
"""

# Installing the kaggle library-
! pip install kaggle

# Uploading kaggle.json file and configuring it's path-
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Importing twitter sentiment dataset-
# Api to fetch the dataset from kaggle-
!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset-
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

# Importing the dependencies-
import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Downloading stopwords for stemming-
import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

# Data processing-
# Loading the data from csv file to pandas dataframe-
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

# checking the number of rows and columns-
twitter_data.shape

# Printing the first five rows of the dataframe-
twitter_data.head()

# naming the columns and reading the dataset again-
column_names = ['target', 'id', 'date', 'flag', 'user', 'text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names = column_names, encoding = 'ISO-8859-1')

twitter_data.shape

# counting the number of missing values in the dataset-
twitter_data.isnull().sum()

# checking the distribution of target column-
twitter_data['target'].value_counts()

"""Converting the target "4" to "1"-"""

twitter_data.replace({'target':{4:1}}, inplace=True)

# checking the distribution of target column-
twitter_data['target'].value_counts()

"""0 == negative tweet

1 == positive tweet
"""

# Stemming-
port_stem = PorterStemmer()

def stemming(content):
    # Replace non-alphabetic characters with space
    stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
    # Convert to lowercase
    stemmed_content = stemmed_content.lower()
    # Split the string into a list of words
    stemmed_content = stemmed_content.split()
    # Stem each word and remove stopwords
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word  in stopwords.words('english')]
    # Join the stemmed words back into a string
    stemmed_content = ' '.join(stemmed_content)

    return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

# Seperating the data and label-
X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

print(X)

print(Y)

# Splitting the data to training and test data-
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# converting text data to numeric data-
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training The ML Model-
Logistic Regression
"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

"""Model Evaluation-"""

# Accuracy Score on the training data-
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score on the training data:', training_data_accuracy)

# Accuracy Score on the test data-
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score on the test data:', test_data_accuracy)

"""Model Accuracy- 77.8%"""

# Saving the trained model-
import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

"""Using the saved trained model for future predictions-"""

# Loading the saved model-
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

X_new = X_test[200]
print(Y_test[200])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative Tweet')

else:
  print("Positive Tweet")

X_new = X_test[7]
print(Y_test[7])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative Tweet')

else:
  print("Positive Tweet")

